// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RewardsAndRecognitionRepository.Models;

#nullable disable

namespace RewardsAndRecognitionRepository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RewardsAndRecognitionRepository.Models.Approval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ActionAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApproverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("NominationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.HasIndex("NominationId");

                    b.ToTable("Approvals");
                });

            modelBuilder.Entity("RewardsAndRecognitionRepository.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ef6ec628-330e-459f-99c2-00a99aed48f7"),
                            CreatedAt = new DateTime(2025, 6, 22, 14, 34, 7, 174, DateTimeKind.Utc).AddTicks(5091),
                            Description = "Awarded to best overall performer",
                            Name = "Best Performer"
                        });
                });

            modelBuilder.Entity("RewardsAndRecognitionRepository.Models.Nomination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Achievements")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NominatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NomineeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("YearQuarterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("NominatorId");

                    b.HasIndex("NomineeId");

                    b.HasIndex("YearQuarterId");

                    b.ToTable("Nominations");
                });

            modelBuilder.Entity("RewardsAndRecognitionRepository.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamLeadId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TeamLeadId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12fc0201-bb3d-4c52-a12f-971e2437c670"),
                            Name = "Alpha Team",
                            TeamLeadId = "956bd6b0-c62b-4e3a-9b97-963b96947499"
                        });
                });

            modelBuilder.Entity("RewardsAndRecognitionRepository.Models.YearQuarter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Quarter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("YearQuarters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d965e32-b5eb-44bf-9795-ad687895c1f7"),
                            EndDate = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Quarter = "Q2",
                            StartDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2025
                        });
                });

            modelBuilder.Entity("RewardsAndRecognitionRepository.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("ManagerId");

                    b.HasIndex("TeamId");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "d3d25e3e-907e-4ea7-937d-20781ae46855",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d733ce3-d632-4fd3-a9fc-54ac6656062d",
                            Email = "admin@company.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "hashed_password_here",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4b38b476-764b-4c0e-9e16-95bf6a26c762",
                            TwoFactorEnabled = false,
                            CreatedAt = new DateTime(2025, 6, 22, 14, 34, 7, 174, DateTimeKind.Utc).AddTicks(4836),
                            IsActive = true,
                            Name = "Admin User"
                        },
                        new
                        {
                            Id = "3dd8963f-d85b-49e9-8f10-8c93c87e7043",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4e9a1a32-608e-4e77-bb65-f34f09bfe9cd",
                            Email = "manager@company.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "hashed_password_here",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e8f527bd-9e1b-460e-a373-0d18ba9cc1d6",
                            TwoFactorEnabled = false,
                            CreatedAt = new DateTime(2025, 6, 22, 14, 34, 7, 174, DateTimeKind.Utc).AddTicks(4848),
                            IsActive = true,
                            Name = "Manager User"
                        },
                        new
                        {
                            Id = "956bd6b0-c62b-4e3a-9b97-963b96947499",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0c768cf7-e62f-4117-8b93-32de804b0ea8",
                            Email = "lead@company.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "hashed_password_here",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2395a56e-3703-4190-8e24-5c0a48395666",
                            TwoFactorEnabled = false,
                            CreatedAt = new DateTime(2025, 6, 22, 14, 34, 7, 174, DateTimeKind.Utc).AddTicks(4862),
                            IsActive = true,
                            ManagerId = "3dd8963f-d85b-49e9-8f10-8c93c87e7043",
                            Name = "Team Lead User"
                        },
                        new
                        {
                            Id = "eb6ace7f-6b53-450f-a6ed-8e6018927900",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "795ba296-132e-4882-bf41-fd4af4593eab",
                            Email = "employee@company.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "hashed_password_here",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f05ec19b-d750-451d-abeb-123d55557a5a",
                            TwoFactorEnabled = false,
                            CreatedAt = new DateTime(2025, 6, 22, 14, 34, 7, 174, DateTimeKind.Utc).AddTicks(4876),
                            IsActive = true,
                            ManagerId = "3dd8963f-d85b-49e9-8f10-8c93c87e7043",
                            Name = "Employee One",
                            TeamId = new Guid("12fc0201-bb3d-4c52-a12f-971e2437c670")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RewardsAndRecognitionRepository.Models.Approval", b =>
                {
                    b.HasOne("RewardsAndRecognitionRepository.Models.User", "Approver")
                        .WithMany("Approvals")
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RewardsAndRecognitionRepository.Models.Nomination", "Nomination")
                        .WithMany("Approvals")
                        .HasForeignKey("NominationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Nomination");
                });

            modelBuilder.Entity("RewardsAndRecognitionRepository.Models.Nomination", b =>
                {
                    b.HasOne("RewardsAndRecognitionRepository.Models.Category", "Category")
                        .WithMany("Nominations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RewardsAndRecognitionRepository.Models.User", "Nominator")
                        .WithMany("NominationsGiven")
                        .HasForeignKey("NominatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RewardsAndRecognitionRepository.Models.User", "Nominee")
                        .WithMany("NominationsReceived")
                        .HasForeignKey("NomineeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RewardsAndRecognitionRepository.Models.YearQuarter", "YearQuarter")
                        .WithMany("Nominations")
                        .HasForeignKey("YearQuarterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Nominator");

                    b.Navigation("Nominee");

                    b.Navigation("YearQuarter");
                });

            modelBuilder.Entity("RewardsAndRecognitionRepository.Models.Team", b =>
                {
                    b.HasOne("RewardsAndRecognitionRepository.Models.User", "TeamLead")
                        .WithMany()
                        .HasForeignKey("TeamLeadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TeamLead");
                });

            modelBuilder.Entity("RewardsAndRecognitionRepository.Models.User", b =>
                {
                    b.HasOne("RewardsAndRecognitionRepository.Models.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RewardsAndRecognitionRepository.Models.Team", "Team")
                        .WithMany("Users")
                        .HasForeignKey("TeamId");

                    b.Navigation("Manager");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("RewardsAndRecognitionRepository.Models.Category", b =>
                {
                    b.Navigation("Nominations");
                });

            modelBuilder.Entity("RewardsAndRecognitionRepository.Models.Nomination", b =>
                {
                    b.Navigation("Approvals");
                });

            modelBuilder.Entity("RewardsAndRecognitionRepository.Models.Team", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("RewardsAndRecognitionRepository.Models.YearQuarter", b =>
                {
                    b.Navigation("Nominations");
                });

            modelBuilder.Entity("RewardsAndRecognitionRepository.Models.User", b =>
                {
                    b.Navigation("Approvals");

                    b.Navigation("NominationsGiven");

                    b.Navigation("NominationsReceived");
                });
#pragma warning restore 612, 618
        }
    }
}
