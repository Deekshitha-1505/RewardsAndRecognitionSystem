// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RewardsAndRecognitionRepository.Models;

#nullable disable

namespace RewardsAndRecognitionRepository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250624060213_ManagerInTeamsTable")]
    partial class ManagerInTeamsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RewardsAndRecognitionRepository.Models.Approval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ActionAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApproverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("NominationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.HasIndex("NominationId");

                    b.ToTable("Approvals");
                });

            modelBuilder.Entity("RewardsAndRecognitionRepository.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b61d3fd2-dcca-467e-8984-743931f32f13"),
                            CreatedAt = new DateTime(2025, 6, 24, 6, 2, 11, 528, DateTimeKind.Utc).AddTicks(125),
                            Description = "Awarded to best overall performer",
                            Name = "Best Performer"
                        });
                });

            modelBuilder.Entity("RewardsAndRecognitionRepository.Models.Nomination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Achievements")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NominatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NomineeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("YearQuarterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("NominatorId");

                    b.HasIndex("NomineeId");

                    b.HasIndex("YearQuarterId");

                    b.ToTable("Nominations");
                });

            modelBuilder.Entity("RewardsAndRecognitionRepository.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamLeadId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("TeamLeadId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = new Guid("95b15c20-8c96-4eea-a4d4-2763df66382f"),
                            Name = "Alpha Team",
                            TeamLeadId = "dd6526eb-50d3-4916-9598-bad83997ec92"
                        });
                });

            modelBuilder.Entity("RewardsAndRecognitionRepository.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TeamId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "48f87d4d-873d-4b1c-9214-eaad1b3e8ff6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a91d3224-ade9-4d01-b80b-e3cb57df2f13",
                            CreatedAt = new DateTime(2025, 6, 24, 6, 2, 11, 527, DateTimeKind.Utc).AddTicks(9541),
                            Email = "admin@company.com",
                            EmailConfirmed = false,
                            IsActive = true,
                            LockoutEnabled = false,
                            Name = "Admin User",
                            PasswordHash = "hashed_password_here",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3a79a451-3bb1-46b8-bde2-d2f5947a4b7f",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "2a98c848-7437-4537-94f4-eb6c7a9991b6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5c7ba577-232b-44c9-95e5-a6ddc5ca614d",
                            CreatedAt = new DateTime(2025, 6, 24, 6, 2, 11, 527, DateTimeKind.Utc).AddTicks(9683),
                            Email = "manager@company.com",
                            EmailConfirmed = false,
                            IsActive = true,
                            LockoutEnabled = false,
                            Name = "Manager User",
                            PasswordHash = "hashed_password_here",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d266a3a6-1af7-419b-aff2-441fa51502a9",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "dd6526eb-50d3-4916-9598-bad83997ec92",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf80c6d8-3471-40fe-87d7-76b461a8ad06",
                            CreatedAt = new DateTime(2025, 6, 24, 6, 2, 11, 527, DateTimeKind.Utc).AddTicks(9714),
                            Email = "lead@company.com",
                            EmailConfirmed = false,
                            IsActive = true,
                            LockoutEnabled = false,
                            ManagerId = "2a98c848-7437-4537-94f4-eb6c7a9991b6",
                            Name = "Team Lead User",
                            PasswordHash = "hashed_password_here",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "38981046-af1c-4211-81c6-99360f3879f8",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "b5bef854-6b8b-4d93-9cbb-47ec8677ec22",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c45bd313-ecde-4e8d-8853-8a2c475dedba",
                            CreatedAt = new DateTime(2025, 6, 24, 6, 2, 11, 527, DateTimeKind.Utc).AddTicks(9741),
                            Email = "employee@company.com",
                            EmailConfirmed = false,
                            IsActive = true,
                            LockoutEnabled = false,
                            ManagerId = "2a98c848-7437-4537-94f4-eb6c7a9991b6",
                            Name = "Employee One",
                            PasswordHash = "hashed_password_here",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "538da704-7037-41ba-82a9-02495d3582d8",
                            TeamId = new Guid("95b15c20-8c96-4eea-a4d4-2763df66382f"),
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("RewardsAndRecognitionRepository.Models.YearQuarter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Quarter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("YearQuarters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5de6e40c-28da-4440-a2be-fb2260544c31"),
                            EndDate = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Quarter = "Q2",
                            StartDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Year = 2025
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RewardsAndRecognitionRepository.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RewardsAndRecognitionRepository.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RewardsAndRecognitionRepository.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RewardsAndRecognitionRepository.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RewardsAndRecognitionRepository.Models.Approval", b =>
                {
                    b.HasOne("RewardsAndRecognitionRepository.Models.User", "Approver")
                        .WithMany("Approvals")
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RewardsAndRecognitionRepository.Models.Nomination", "Nomination")
                        .WithMany("Approvals")
                        .HasForeignKey("NominationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Nomination");
                });

            modelBuilder.Entity("RewardsAndRecognitionRepository.Models.Nomination", b =>
                {
                    b.HasOne("RewardsAndRecognitionRepository.Models.Category", "Category")
                        .WithMany("Nominations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RewardsAndRecognitionRepository.Models.User", "Nominator")
                        .WithMany("NominationsGiven")
                        .HasForeignKey("NominatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RewardsAndRecognitionRepository.Models.User", "Nominee")
                        .WithMany("NominationsReceived")
                        .HasForeignKey("NomineeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RewardsAndRecognitionRepository.Models.YearQuarter", "YearQuarter")
                        .WithMany("Nominations")
                        .HasForeignKey("YearQuarterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Nominator");

                    b.Navigation("Nominee");

                    b.Navigation("YearQuarter");
                });

            modelBuilder.Entity("RewardsAndRecognitionRepository.Models.Team", b =>
                {
                    b.HasOne("RewardsAndRecognitionRepository.Models.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RewardsAndRecognitionRepository.Models.User", "TeamLead")
                        .WithMany()
                        .HasForeignKey("TeamLeadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("TeamLead");
                });

            modelBuilder.Entity("RewardsAndRecognitionRepository.Models.User", b =>
                {
                    b.HasOne("RewardsAndRecognitionRepository.Models.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RewardsAndRecognitionRepository.Models.Team", "Team")
                        .WithMany("Users")
                        .HasForeignKey("TeamId");

                    b.Navigation("Manager");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("RewardsAndRecognitionRepository.Models.Category", b =>
                {
                    b.Navigation("Nominations");
                });

            modelBuilder.Entity("RewardsAndRecognitionRepository.Models.Nomination", b =>
                {
                    b.Navigation("Approvals");
                });

            modelBuilder.Entity("RewardsAndRecognitionRepository.Models.Team", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("RewardsAndRecognitionRepository.Models.User", b =>
                {
                    b.Navigation("Approvals");

                    b.Navigation("NominationsGiven");

                    b.Navigation("NominationsReceived");
                });

            modelBuilder.Entity("RewardsAndRecognitionRepository.Models.YearQuarter", b =>
                {
                    b.Navigation("Nominations");
                });
#pragma warning restore 612, 618
        }
    }
}
