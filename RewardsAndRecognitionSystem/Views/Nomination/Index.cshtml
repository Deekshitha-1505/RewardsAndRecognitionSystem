@using RewardsAndRecognitionRepository.Enums
@model IEnumerable<RewardsAndRecognitionRepository.Models.Nomination>

@{
    ViewData["Title"] = "Nominations List";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var reviewedIds = ViewBag.ReviewedNominationIds as List<Guid> ?? new List<Guid>();
    var nominationsList = Model.ToList();
    var isManager = User.IsInRole("Manager");
    var isTeamLead = User.IsInRole("TeamLead");
}

<style>
    body {
        color: #fff;
    }

    table {
        width: 100%;
        background: #fff;
        border-radius: 10px;
        color: black;
        overflow: hidden;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }

    th, td {
        padding: 12px;
        text-align: left;
        border-bottom: 1px solid #ddd;
        vertical-align: top;
    }

    .popup-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: rgba(0,0,0,0.7);
        display: none;
        justify-content: center;
        align-items: center;
        z-index: 9999;
    }

    .popup-card {
        background: #fff;
        padding: 20px;
        border-radius: 10px;
        width: 500px;
        color: black;
        box-shadow: 0 8px 20px rgba(0,0,0,0.2);
        max-height: 90vh;
        overflow-y: auto;
    }

    .popup-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .popup-close {
        background: none;
        border: none;
        font-size: 1.5rem;
        color: #999;
        cursor: pointer;
    }

    .popup-fields {
        display: flex;
        flex-direction: column;
        gap: 10px;
        margin-bottom: 20px;
        font-size: 14.5px;
    }

    .popup-field {
        display: flex;
        flex-direction: column;
        background: #f1f1f1;
        padding: 8px;
        border-radius: 6px;
    }

        .popup-field strong {
            font-weight: 600;
            color: #555;
        }

    .popup-textarea {
        background-color: #fff;
        border: 1px solid #ddd;
        padding: 8px;
        border-radius: 4px;
        width: 100%;
        color: #333;
        white-space: pre-wrap;
        word-wrap: break-word;
    }

    .btn {
        padding: 6px 12px;
        border-radius: 4px;
        border: none;
        cursor: pointer;
    }

    .btn-approve {
        background: green;
        color: white;
    }

    .btn-reject {
        background: crimson;
        color: white;
    }

    .btn-disabled {
        background: #ccc;
        color: #666;
        cursor: not-allowed;
    }

    .filter-bar {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
    }

        .filter-bar input,
        .filter-bar select {
            padding: 8px;
            border-radius: 4px;
            min-width: 150px;
        }

    .popup-content {
        white-space: pre-wrap;
        word-wrap: break-word;
        font-size: 15px;
        line-height: 1.6;
        color: #333;
        margin-top: 10px;
    }
</style>

<h2>Nominations</h2>

@if (isTeamLead)
{
    <div style="text-align: right; margin-bottom: 20px;">
        <a asp-action="Create" class="btn btn-success">
            <i class="bi bi-plus-circle"></i> Create Nomination
        </a>
    </div>

    <table class="table table-bordered bg-white text-dark">
        <thead>
            <tr>
                <th>S.No</th>
                <th>Nominee</th>
                <th>Team</th>
                <th>Category</th>
                <th>Status</th>
                <th>CreatedDate</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < nominationsList.Count; i++)
            {
                var n = nominationsList[i];
                var shortDesc = n.Description?.Length > 50 ? n.Description.Substring(0, 50) + "..." : n.Description;

                <tr>
                    <td>@(i + 1)</td>
                    <td>@n.Nominee?.Name</td>
                    <td>@n.Nominee?.Team?.Name</td>
                    <td>@n.Category?.Name</td>
                    <td>@n.Status</td>
                    <td>@n.CreatedAt.ToShortDateString()</td>
                    <td>
                        <a asp-action="Details" asp-route-id="@n.Id" class="btn btn-sm btn-info">
                            Details
                        </a>
                        <a asp-action="Edit" asp-route-id="@n.Id" class="btn btn-sm btn-primary">
                            Edit
                        </a>
                        <button type="button"
                                class="btn btn-danger btn-sm"
                                data-bs-toggle="modal"
                                data-bs-target="#deleteModal"
                                data-id="@n.Id">
                            Delete
                        </button>

                    </td>
                </tr>
            }
        </tbody>
    </table>
    <!-- Delete Confirmation Modal -->
    <!-- Delete Confirmation Modal -->
    <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content bg-white text-dark">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-exclamation-triangle text-danger"></i> Confirm Deletion</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this nomination?
                </div>
                <div class="modal-footer">
                    <form id="deleteForm" asp-action="DeleteConfirmed" asp-controller="Nomination" method="post">
                        <input type="hidden" name="id" id="deleteNominationId" />
                        @Html.AntiForgeryToken()
                        <button type="submit" class="btn btn-danger">
                            <i class="bi bi-trash-fill"></i> Delete
                        </button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                            <i class="bi bi-x-circle"></i> Cancel
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>


}

@if (isManager)
{
    <div class="filter-bar">
        <input type="text" id="liveSearch" placeholder="Search Nominee Name" />
        <select id="filterSelect">
            <option value="all">All</option>
            <option value="pending">Pending</option>
            <option value="reviewed">Reviewed</option>
        </select>
    </div>

    <table class="table table-bordered bg-white text-dark" id="nominationsTable">
        <thead>
            <tr>
                <th>#</th>
                <th>Nominee</th>
                <th>Team</th>
                <th>Category</th>
                <th>Nominated By</th>
                <th>Status</th>
                <th>Created</th>
                <th>Review</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < nominationsList.Count; i++)
            {
                var n = nominationsList[i];
                var isReviewed = reviewedIds.Contains(n.Id);
                var statusClass = isReviewed ? "reviewed" : "pending";

                <tr class="@statusClass"
                    data-index="@i"
                    data-id="@n.Id"
                    data-name="@n.Nominee?.Name?.ToLower()"
                    data-team="@n.Nominee?.Team?.Name"
                    data-category="@n.Category?.Name"
                    data-nominatedby="@n.Nominator?.Name"
                    data-description="@n.Description"
                    data-achievements="@n.Achievements"
                    data-status="@n.Status"
                    data-created="@n.CreatedAt.ToShortDateString()"
                    data-reviewed="@isReviewed.ToString().ToLower()">
                    <td>@(i + 1)</td>
                    <td>@n.Nominee?.Name</td>
                    <td>@n.Nominee?.Team?.Name</td>
                    <td>@n.Category?.Name</td>
                    <td>@n.Nominator?.Name</td>
                    <td>@n.Status</td>
                    <td>@n.CreatedAt.ToShortDateString()</td>
                    <td>
                        @if (isReviewed)
                        {
                            <span class="btn btn-disabled">Reviewed</span>
                        }
                        else
                        {
                            <button class="btn btn-light btn-sm open-popup" data-index="@i">Review</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Manager Review Popup -->
    <div class="popup-overlay" id="popupOverlay">
        <div class="popup-card">
            <div class="popup-header">
                <h4>Nomination Details</h4>
                <button class="popup-close" onclick="closePopup()">×</button>
            </div>
            <div id="popupContent"></div>
        </div>
    </div>

    <!-- Hidden Form -->
    <form id="reviewForm" method="post" asp-action="Review" asp-controller="Nomination">
        <input type="hidden" name="id" id="reviewId" />
        <input type="hidden" name="action" id="reviewAction" />
        <input type="hidden" name="remarks" id="reviewRemarks" />
        @Html.AntiForgeryToken()
    </form>
}

@section Scripts {
    <script>
        function closePopup() {
            document.getElementById("popupOverlay").style.display = "none";
            document.getElementById("popupContent").innerHTML = "";
        }

        function openPopup(index) {
            const row = document.querySelector(`button[data-index='${index}']`).closest("tr");
            const data = row.dataset;

            const html = `
                <div class="popup-fields">
                    <div class="popup-field"><strong>Nominee:</strong> ${data.name}</div>
                    <div class="popup-field"><strong>Team:</strong> ${data.team}</div>
                    <div class="popup-field"><strong>Category:</strong> ${data.category}</div>
                    <div class="popup-field"><strong>Nominated By:</strong> ${data.nominatedby}</div>
                    <div class="popup-field"><strong>Description:</strong><div class="popup-textarea">${data.description}</div></div>
                    <div class="popup-field"><strong>Achievements:</strong><div class="popup-textarea">${data.achievements}</div></div>
                    <div class="popup-field"><strong>Status:</strong> ${data.status}</div>
                    <div class="popup-field"><strong>Created:</strong> ${data.created}</div>
                </div>

                <form method="post" asp-action="Review" asp-controller="Nomination">
                    <input type="hidden" name="id" value="${data.id}" />
                    <input type="hidden" name="action" id="actionField" />
                    <div class="mb-3">
                        <label for="remarks"><strong>Remarks</strong></label>
                        <textarea name="remarks" required class="form-control" rows="3"></textarea>
                    </div>
                    <div class="d-flex justify-content-end gap-3 mt-3">
                        <button type="button" class="btn btn-success" onclick="submitAction('Approved')">
                            <i class="bi bi-check-circle"></i> Approve
                        </button>
                        <button type="button" class="btn btn-danger" onclick="submitAction('Rejected')">
                            <i class="bi bi-x-circle"></i> Reject
                        </button>
                    </div>
                </form>
            `;

            document.getElementById("popupContent").innerHTML = html;
            document.getElementById("popupOverlay").style.display = "flex";
        }

        function submitAction(action) {
            const remarks = document.querySelector("#popupContent textarea[name='remarks']").value;
            const id = document.querySelector("#popupContent input[name='id']").value;

            document.getElementById("reviewId").value = id;
            document.getElementById("reviewAction").value = action;
            document.getElementById("reviewRemarks").value = remarks;

            document.getElementById("reviewForm").submit();
        }
        document.querySelectorAll("button.open-popup").forEach(btn => {
            btn.addEventListener("click", e => {
                e.stopPropagation();
                openPopup(btn.dataset.index);
            });
        });

        function filterTable() {
            const filter = document.getElementById("filterSelect")?.value ?? "all";
            const search = document.getElementById("liveSearch")?.value.toLowerCase();

            document.querySelectorAll("tbody tr").forEach(row => {
                const name = row.getAttribute("data-name") ?? "";
                const isReviewed = row.classList.contains("reviewed");
                const isPending = row.classList.contains("pending");

                let visible = true;
                if (filter === "pending" && !isPending) visible = false;
                if (filter === "reviewed" && !isReviewed) visible = false;
                if (search && !name.includes(search)) visible = false;

                row.style.display = visible ? "" : "none";
            });
        }
        var deleteModal = document.getElementById('deleteModal');
        deleteModal.addEventListener('show.bs.modal', function (event) {
            var button = event.relatedTarget;
            var nominationId = button.getAttribute('data-id');
            document.getElementById('deleteNominationId').value = nominationId;
        });

        document.getElementById("filterSelect")?.addEventListener("change", filterTable);
        document.getElementById("liveSearch")?.addEventListener("input", filterTable);
    </script>
}
